# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nebula.data.generation.teleoperation.panda import mp_pb2 as mp__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PlannerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlanToPose = channel.unary_unary(
                '/mp.Planner/PlanToPose',
                request_serializer=mp__pb2.PlanToPoseRequest.SerializeToString,
                response_deserializer=mp__pb2.PlanReply.FromString,
                _registered_method=True)
        self.PlanScrew = channel.unary_unary(
                '/mp.Planner/PlanScrew',
                request_serializer=mp__pb2.PlanToPoseRequest.SerializeToString,
                response_deserializer=mp__pb2.PlanReply.FromString,
                _registered_method=True)
        self.UpdatePointCloud = channel.unary_unary(
                '/mp.Planner/UpdatePointCloud',
                request_serializer=mp__pb2.UpdatePCRequest.SerializeToString,
                response_deserializer=mp__pb2.StatusReply.FromString,
                _registered_method=True)
        self.ClearCollisions = channel.unary_unary(
                '/mp.Planner/ClearCollisions',
                request_serializer=mp__pb2.Empty.SerializeToString,
                response_deserializer=mp__pb2.StatusReply.FromString,
                _registered_method=True)


class PlannerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PlanToPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlanScrew(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePointCloud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCollisions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlannerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlanToPose': grpc.unary_unary_rpc_method_handler(
                    servicer.PlanToPose,
                    request_deserializer=mp__pb2.PlanToPoseRequest.FromString,
                    response_serializer=mp__pb2.PlanReply.SerializeToString,
            ),
            'PlanScrew': grpc.unary_unary_rpc_method_handler(
                    servicer.PlanScrew,
                    request_deserializer=mp__pb2.PlanToPoseRequest.FromString,
                    response_serializer=mp__pb2.PlanReply.SerializeToString,
            ),
            'UpdatePointCloud': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePointCloud,
                    request_deserializer=mp__pb2.UpdatePCRequest.FromString,
                    response_serializer=mp__pb2.StatusReply.SerializeToString,
            ),
            'ClearCollisions': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCollisions,
                    request_deserializer=mp__pb2.Empty.FromString,
                    response_serializer=mp__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mp.Planner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mp.Planner', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Planner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PlanToPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mp.Planner/PlanToPose',
            mp__pb2.PlanToPoseRequest.SerializeToString,
            mp__pb2.PlanReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlanScrew(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mp.Planner/PlanScrew',
            mp__pb2.PlanToPoseRequest.SerializeToString,
            mp__pb2.PlanReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePointCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mp.Planner/UpdatePointCloud',
            mp__pb2.UpdatePCRequest.SerializeToString,
            mp__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearCollisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mp.Planner/ClearCollisions',
            mp__pb2.Empty.SerializeToString,
            mp__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
